# Do not edit this file directly. Use a 'docker-compose.override.yaml' file if you can.
# Refer to `docker-compose.override.yaml.example' for some sample configurations.

services:
  librechat:
    container_name: librechat
    depends_on:
      - mongodb
      - rag_api
      - meilisearch
      - mcp-youtube-transcript
    image: ghcr.io/danny-avila/librechat-dev:latest
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"
    labels:
      - traefik.enable=true
      - traefik.http.routers.librechat.rule=Host(`librechat.${DOMAIN_NAME}`)
      - traefik.http.routers.librechat.entrypoints=websecure
      - traefik.http.routers.librechat.service=librechat
      - traefik.http.routers.librechat.tls=true
      - traefik.http.routers.librechat.tls.certresolver=letsencrypt
      - traefik.http.services.librechat.loadbalancer.server.port=3080
    environment:
      - HOST=0.0.0.0
      - DOMAIN_NAME=librechat.${DOMAIN_NAME}
      - DOMAIN_CLIENT=https://librechat.${DOMAIN_NAME}
      - DOMAIN_SERVER=http://localhost:3080
      - PORT=3080
      - MONGO_URI=mongodb://mongodb:27017/LibreChat
      - MEILI_HOST=http://meilisearch:7700
      - MEILI_MASTER_KEY=${LIBRECHAT_MEILI_MASTER_KEY}
      - RAG_PORT=8000
      - RAG_API_URL=http://rag_api:8000
      - GOOGLE_KEY=${GEMINI_API_KEY}
      - OPENROUTER_KEY=${OPENROUTER_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      # These APIs will be configured by users in the UI
      # - OPENAI_API_KEY=user_provided
      # - ANTHROPIC_API_KEY=user_provided
      # - ASSISTANTS_API_KEY=user_provided
      - JWT_SECRET=${LIBRECHAT_JWT_SECRET}
      - JWT_REFRESH_SECRET=${LIBRECHAT_JWT_REFRESH_SECRET}
      - CREDS_KEY=${LIBRECHAT_CREDS_KEY}
      - CREDS_IV=${LIBRECHAT_CREDS_IV}
      - SESSION_EXPIRY=1000 * 60 * 15
      - REFRESH_TOKEN_EXPIRY=(1000 * 60 * 60 * 24) * 7
      - TRUST_PROXY=1
      - DEBUG_CONSOLE=false
      - CONSOLE_JSON=false
      - APP_TITLE=LibreChat
      - HELP_AND_FAQ_URL=https://librechat.ai
      - DEBUG_PLUGINS=true
      - DEBUG_OPENAI=false
      - OPENAI_MODERATION=false
      - BAN_VIOLATIONS=true
      - BAN_DURATION=1000 * 60 * 60 * 2
      - BAN_INTERVAL=20
      - LOGIN_VIOLATION_SCORE=1
      - REGISTRATION_VIOLATION_SCORE=1
      - CONCURRENT_VIOLATION_SCORE=1
      - MESSAGE_VIOLATION_SCORE=1
      - NON_BROWSER_VIOLATION_SCORE=20
      - LOGIN_MAX=7
      - LOGIN_WINDOW=5
      - REGISTER_MAX=5
      - REGISTER_WINDOW=60
      - LIMIT_CONCURRENT_MESSAGES=true
      - CONCURRENT_MESSAGE_MAX=2
      - LIMIT_MESSAGE_IP=true
      - MESSAGE_IP_MAX=40
      - MESSAGE_IP_WINDOW=1
      - LIMIT_MESSAGE_USER=false
      - MESSAGE_USER_MAX=40
      - MESSAGE_USER_WINDOW=1
      - ILLEGAL_MODEL_REQ_SCORE=5
      - NO_INDEX=true
      - DEBUG_LOGGING=true
      - SEARCH=true
      - MEILI_NO_ANALYTICS=true
      - ALLOW_EMAIL_LOGIN=true
      - ALLOW_REGISTRATION=true
      - ALLOW_SOCIAL_LOGIN=false
      - ALLOW_SOCIAL_REGISTRATION=false
      - ALLOW_PASSWORD_RESET=false
      - ALLOW_UNVERIFIED_EMAIL_LOGIN=true
      - ALLOW_SHARED_LINKS=true
      - ALLOW_SHARED_LINKS_PUBLIC=true
    volumes:
      - librechat_images:/app/client/public/images
      - librechat_uploads:/app/uploads
      - librechat_logs:/app/api/logs
      - ./librechat.yaml:/app/librechat.yaml
    security_opt:
      - label:disable
    networks:
      - librechat
      - proxy

  mongodb:
    container_name: chat-mongodb
    image: docker.io/library/mongo:8.0.13-noble
    restart: always
    volumes:
      - mongodb_data:/data/db
    command: mongod --noauth
    networks:
      - librechat
  meilisearch:
    container_name: chat-meilisearch
    image: docker.io/getmeili/meilisearch:v1.22.2
    restart: always
    environment:
      - MEILI_HOST=http://meilisearch:7700
      - MEILI_NO_ANALYTICS=true
      - MEILI_MASTER_KEY=${LIBRECHAT_MEILI_MASTER_KEY}
    volumes:
      - meili_data:/meili_data
    networks:
      - librechat
  pgvector:
    container_name: pgvector
    image: docker.io/pgvector/pgvector:0.8.0-pg17
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    restart: always
    volumes:
      - pgdata2:/var/lib/postgresql/data
    networks:
      - librechat
  rag_api:
    container_name: rag_api
    image: ghcr.io/danny-avila/librechat-rag-api-dev-lite:f7a3254529b07ff951472618d9499f0772a48138
    environment:
      - DB_HOST=pgvector
      - RAG_PORT=8000
    restart: always
    depends_on:
      - pgvector
    networks:
      - librechat

  mcp-youtube-transcript:
    container_name: mcp-youtube-transcript
    build:
      context: .
      dockerfile: mcp-proxy.Dockerfile
    labels:
      - traefik.enable=true
      - traefik.http.services.mcp-youtube-transcript.loadbalancer.server.port=8080
      - traefik.http.middlewares.cors.headers.accessControlAllowMethods=*
      - traefik.http.middlewares.cors.headers.accessControlAllowHeaders=*
      - traefik.http.middlewares.cors.headers.accessControlAllowOriginList=*
      - traefik.http.middlewares.cors.headers.addVaryHeader=true

      - traefik.http.routers.mcp-youtube-transcript.rule=Host(`mcp-youtube-transcript.${DOMAIN_NAME}`)
      - traefik.http.routers.mcp-youtube-transcript.entrypoints=websecure
      - traefik.http.routers.mcp-youtube-transcript.service=mcp-youtube-transcript
      - traefik.http.routers.mcp-youtube-transcript.tls=true
      - traefik.http.routers.mcp-youtube-transcript.tls.certresolver=letsencrypt
      - traefik.http.routers.mcp-youtube-transcript.middlewares=cors
    restart: always
    command: --sse-host=0.0.0.0 --sse-port=8080 -- uvx --from git+https://github.com/jkawamoto/mcp-youtube-transcript mcp-youtube-transcript 
    networks:
      - librechat
      - proxy

  mcp-browser-use:
    container_name: mcp-browser-use
    image: ghcr.io/co-browser/browser-use-mcp-server:pr-29
    labels:
      - traefik.enable=true
      - traefik.http.services.mcp-browser-use.loadbalancer.server.port=8000
      - traefik.http.services.mcp-browser-use-vnc.loadbalancer.server.port=5900

      - traefik.http.routers.mcp-browser-use.rule=Host(`mcp-browser-use.${DOMAIN_NAME}`)
      - traefik.http.routers.mcp-browser-use.entrypoints=websecure
      - traefik.http.routers.mcp-browser-use.service=mcp-browser-use
      - traefik.http.routers.mcp-browser-use.tls=true
      - traefik.http.routers.mcp-browser-use.tls.certresolver=letsencrypt

      - traefik.http.routers.mcp-browser-use-vnc.rule=Host(`mcp-browser-use-vnc.${DOMAIN_NAME}`)
      - traefik.http.routers.mcp-browser-use-vnc.entrypoints=websecure
      - traefik.http.routers.mcp-browser-use-vnc.service=mcp-browser-use-vnc
      - traefik.http.routers.mcp-browser-use-vnc.tls=true
      - traefik.http.routers.mcp-browser-use-vnc.tls.certresolver=letsencrypt
    volumes:
      - ./vnc-password:/run/secrets/vnc_password
    security_opt:
      - label:disable
    restart: always
    networks:
      - librechat
      - proxy

  # mcp-puppeteer:
  #   container_name: mcp-puppeteer
  #   build:
  #     context: .
  #     dockerfile: mcp-proxy.Dockerfile
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.mcp-youtube-transcript.rule=Host(`mcp.${DOMAIN_NAME}`) && PathPrefix(`/mcp-youtube-transcript`)
  #     - traefik.http.routers.mcp-youtube-transcript.entrypoints=websecure
  #     - traefik.http.routers.mcp-youtube-transcript.service=mcp-youtube-transcript
  #     - traefik.http.routers.mcp-youtube-transcript.tls=true
  #     - traefik.http.routers.mcp-youtube-transcript.tls.certresolver=letsencrypt
  #     - traefik.http.services.mcp-youtube-transcript.loadbalancer.server.port=8080
  #   restart: always
  #   command: --sse-host=0.0.0.0 --sse-port=8080 -- uvx --from git+https://github.com/jkawamoto/mcp-youtube-transcript mcp-youtube-transcript 
  #   networks:
  #     - librechat
  #     - proxy

volumes:
  pgdata2:
  librechat_images:
  librechat_uploads:
  librechat_logs:
  mongodb_data:
  meili_data:

networks:
  librechat:
    internal: true
  proxy:
    name: proxy
    external: true
